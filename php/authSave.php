<?php session_start(); ?>
<h3 class="fw-bold mt-5">Хеширование пароля</h3>
<p>
    Хранить пароль в открытом виде - неправильно. Хакер-злоумышленник может получить доступ к вашей базе данных и украсть пароли.
    <br />Поэтому обычно логин хранится в открытом виде, а пароль хешируется специальной функцией md5, которая параметром принимает пароль, а возвращает его хеш, по которому нельзя восстановить этот самый пароль.
    <br />Давайте, например, найдем хеш какой-нибудь строки:
</p>
<code>
    <pre>
    &lt?php
        echo md5('12345'); // выведет <?= md5('12345'); ?>
    </pre>
</code>

<p>
    Сейчас нам необходимо переделать нашу регистрацию и нашу авторизацию. Для начала я бы советовал очистить таблицу с юзерами, так как там сейчас хранятся пароли в открытом виде, а должны хранится их хеши. Затем при тестировании регистрации таблица заполнится данными в новом формате.<br />Давайте теперь поправим нашу регистрацию так, чтобы при сохранении нового пользователя в базу добавлялся не пароль, а его хеш.<br />Описанная правка будет представлять собой что-то такое:
</p>
<code>
    <pre>
    &lt?php
    $login = $_POST['login'];
    $password = md5($_POST['password']); // преобразуем пароль в его хеш

    $query = "INSERT INTO users SET login='$login', password='$password'";
    ?>
    </pre>
</code>
<p>Внесем аналогичные правки в авторизацию:</p>
<code>
    <pre>
    &lt?php
	$login = $_POST['login'];
	$password = md5($_POST['password']); // преобразуем пароль в его хеш
		
	$query = "SELECT * FROM users WHERE login='$login' AND password='$password'";
    ?>
    </pre>
</code>
<p class="fw-bold mt-3">Задача</p>
<p>Внесите изменения в регистрацию с учетом хеширования, зарегистрируйте пару новых пользователей, убедитесь, что в базу данных они добавились с хешированными паролями.</p>
<p class="fw-bold">Решение:</p>
<p class="fw-bold" id="save_reg_1">Результат:</p>
<p>Приветствую

    <?php if (!empty($_SESSION['user'])) : ?>
        <span><?= $_SESSION['user'] ?></span>
    <?php else : ?>
        <span>неизвестный</span>
    <?php endif; ?>
    !
</p>
<br />
<a href="php_tasks/auth_save/1/reg_1.php">Регистрация</a>
<br />
<?php if (!empty($_SESSION['user'])) : ?>
    <a href="php_tasks/auth_save/1/logoff_1.php">Выход</a>
<?php else : ?>
    <a href="php_tasks/auth_save/1/auth_1.php">Вход</a>
<?php endif; ?>
<br />

<h3 class="fw-bold mt-5">Добавление соли в регистрацию</h3>
<p>
Итак, вы уже знаете, что хеширование через md5 - необратимый процесс и хакер, получивший доступ к хешу, не сможет получить по этому хешу пароль.<br/>
На самом деле это утверждение не совсем верное - в настоящее время злые хакеры составили библиотеки хешей популярных и не очень паролей и любой дурак может разгадать пароль, просто загуглив его хеш.<br/>
Речь идет о достаточно простых, популярных паролях.<br/>
Загуглите, например, хеш 827ccb0eea8a706c4c34a16891f84e7b и сразу в поиске гугла вы увидите, что это пароль '12345'.<br/>
Хеши достаточно сложных паролей таким образом не разгадать (попробуйте).
Вы можете спросить, в чем тогда проблема - давайте все мы будем регистрироваться со сложными паролями. Есть, однако, проблема - большинство пользователей не задумываются о безопасности своих данных и могут вводить достаточно простые пароли.<br/>
Мы можем при регистрации заставлять придумывать более длинные пароли, ограничивая, к примеру, минимальное количество символов 6-ю или 8-ю, однако, все равно будут появляться пароли вида '123456' или '12345678'.<br/>
Можно, конечно, придумать более умный алгоритм проверки пароля на сложность, но есть другое решение.<br/>
Суть этого решения такая: пароли надо посолить. Соль - это специальная случайная строка, которая будет добавляться к паролю при регистрации и хеш уже будет вычисляться не от простого пароля типа, а от строки соль+пароль, то есть от соленого пароля.<br/>
То есть при регистрации вы будете делать что-то типа такого:<br/>
</p>
<code>
    <pre>
    &lt?php
        $salt = '1sJg3hfdf'; // соль - сложная случайная строка
        $password = md5($salt . $_POST['password']); // преобразуем пароль в соленый 
            хеш 
    ?>
    </pre>
</code>

<p>
При этом соль будет разная для каждого пользователя, ее нужно будет генерировать случайным образом в момент регистрации.<br/>
Вот готовая функция, которая сделает это:
</p>

<code>
    <pre>
    &lt?php
        function generateSalt()
        {
            $salt = '';
            $saltLength = 8; // длина соли
            
            for($i = 0; $i < $saltLength; $i++) {
                $salt .= chr(mt_rand(33, 126)); // символ из ASCII-table
            }
            
            return $salt;
        }
    ?>
    </pre>
</code>
<p>
С помощью этой функции можно переписать наш код вот так:
</p>
<code>
    <pre>
    &lt?php
        $salt = generateSalt(); // соль
        $password = md5($salt . $_POST['password']); // соленый пароль
    ?>
    </pre>
</code>
<p>
Еще раз повторю, что это были изменения при регистрации - в БД сохраняем не просто хеш пароля, а хеш соленого пароля.<br/>
Это еще не все: в таблице с юзерами кроме поля login и password нужно сделать еще и поле salt, в котором мы будем хранить соль каждого пользователя.
</p>
<p class="fw-bold mt-3">Задача</p>
<p>
    Реализуйте описанную выше регистрацию с соленым паролем.
</p>
<p class="fw-bold">Решение:</p>
<p class="fw-bold">Результат:</p>

<p>Приветствую

    <?php if (!empty($_SESSION['user_2'])) : ?>
        <span><?= $_SESSION['user_2'] ?></span>
    <?php else : ?>
        <span>неизвестный</span>
    <?php endif; ?>
    !
</p>
<br />
<a href="php_tasks/auth_save/2/reg_2.php">Регистрация</a>
<br />
<?php if (!empty($_SESSION['user'])) : ?>
    <a href="php_tasks/auth_save/2/logoff_2.php">Выход</a>
<?php else : ?>
    <a href="php_tasks/auth_save/2/auth_2.php">Вход</a>
<?php endif; ?>
<br />


<!-- 
    <p class="fw-bold mt-3">Задача</p>
    <p></p>
    <p class="fw-bold">Решение:</p>
    <p class="fw-bold">Результат:</p>
-->

<!-- 
<h3 class="fw-bold mt-5">Практические задачи</h3>
 -->