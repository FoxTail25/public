<?php
// Функция in_array проверяет наличие заданного элемента в массиве. Первым параметром она принимает что искать, а вторым - в каком массиве.

// Синтаксис: in_array(что искать, в каком массиве);
// Пример 
// Давайте проверим, есть ли в массиве $arr элемент со значением 3:

// 	$arr = ['a', 'b', 'c', 'd', 'e'];
// 	$result = in_array('c', $arr);
// 	var_dump($result);
// Результат выполнения кода: true

use BcMath\Number;

hr();
addBr('Функция ' . rB('in_array') . ' проверяет наличие заданного элемента в массиве. Первым параметром она принимает что искать, а вторым - в каком массиве.');
echo addCode("var_dump(in_array('c', ['a', 'b', 'c', 'd', 'e'])) = ");
addBr(var_dump(in_array('c', ['a', 'b', 'c', 'd', 'e'])));
addBr('');
hr();
addBr('Функция ' . rB('array_sum') . ' вычисляет сумму элементов массива.');

// Синтаксис: array_sum(массив);
// Пример 1
// Давайте найдем сумму элементов массива:
// 	$arr = [1, 2, 3, 4, 5];
addBr(addCode('echo array_sum([1, 2, 3, 4, 5]) = ') . array_sum([1, 2, 3, 4, 5]));
// Результат выполнения кода: 15

// Пример 2
// Давайте найдем сумму цифр числа. Для этого разобьем число в массив с помощью str_split и сложим элементы этого массива с помощью array_sum:
// 	$num = 12345;
// 	echo array_sum(str_split($num, 1));
// Результат выполнения кода: 15


// Функция array_product вычисляет произведение (умножение) элементов массива.
// Синтаксис: array_product(массив);
// Пример 
// Давайте найдем произведение элементов массива: $arr = [1, 2, 3, 4, 5];
// 	echo array_product($arr);
// Результат выполнения кода: 120

addBr(' ');
hr();
addBr('Функция ' . rB('array_product') . ' вычисляет произведение (умножение) элементов массива.');
addBr(addCode('echo array_product([1, 2, 3, 4, 5]) = ') . array_product([1, 2, 3, 4, 5]));

addBr(rB('Задача'));
addBr('Дан массив: $arr = [1, 2, 3, 4, 5]; С помощью функций array_sum и count найдите среднее арифметическое элементов (сумма элементов делить на их количество) данного массива.');
addBr(addCode('array_product([1, 2, 3, 4, 5]) / count([1, 2, 3, 4, 5]) = ') . array_product([1, 2, 3, 4, 5]) / count([1, 2, 3, 4, 5]));
addBr(" ");
hr();
addBr("Функция " . rB('range') . " создает массив с диапазоном элементов. К примеру, можно создать массив, заполненный числами от 1 до 100 или буквами от 'a' до 'z'. Диапазон, который сгенерирует функция, задается параметрами: первый параметр откуда генерировать, а второй - докуда. Третий необязательный параметр функции задает шаг. К примеру, можно сделать ряд 1, 3, 5, 7, если задать шаг 2, или ряд 1, 4, 7, 10 если задать шаг 3.");
// Синтаксис: range(откуда, докуда, [шаг]);
// Пример 
// Давайте создадим массив, заполненный числами от 0 до 10 c шагом 2:
// 	var_dump(range(0, 10, 2));
// Результат выполнения кода: [0, 2, 4, 6, 8, 10]
// addBr(" ");
addBr(rB('Задача'));
addBr('Создайте массив, заполненный числами от 1 до 100.');
echo (addCode('range(1,100) = '));
addBr(var_dump(range(1, 100)));
addBr(rB('Задача'));
addBr("Создайте массив, заполненный буквами от 'a' до 'z'.");
echo (addCode("range('a', 'z') = "));
addBr(var_dump(range('a', 'z')));
addBr(rB('Задача'));
addBr("Создайте строку '1-2-3-4-5-6-7-8-9' не используя цикл.");
echo (addCode("implode('-'range('1', '9')) = "));
addBr(var_dump(implode('-', range('1', '9'))));
addBr(rB('Задача'));
addBr("Найдите сумму чисел от 1 до 100 не используя цикл.");
echo (addCode("array_sum(range(1, 100)) = "));
addBr(var_dump(array_sum(range(1, 100))));
addBr(rB('Задача'));
addBr("Найдите произведение чисел от 1 до 10 не используя цикл.");
echo (addCode("array_product(range(1, 10)) = "));
addBr(var_dump(array_product(range(1, 10))));
addBr(" ");
hr();
addBr("Функция " . rB('array_merge') . " сливает два и более массивов вместе. Если в сливаемых массивах встречаются одинаковые ключи - останется только один из таких элементов. Если вам нужно, чтобы остались все элементы с одинаковыми ключами - используйте функцию " . rB('array_merge_recursive.'));
// Синтаксис: array_merge(первый массив, второй массив...);
// Пример 
// Давайте сольем два массива вместе:

// 	$arr1 = ['a', 'b', 'c', 'd', 'e'];
// 	$arr2 = [1, 2, 3, 4, 5];

// 	$result = array_merge($arr1, $arr2);
// 	var_dump($result);
// Результат выполнения кода: ['a', 'b', 'c', 'd', 'e', 1, 2, 3, 4, 5]
addBr(rB('Задача'));
addBr("Даны массивы: arr1 = [1, 2, 3]; arr2 = ['a', 'b', 'c']; Сделайте из них массив:	[1, 2, 3, 'a', 'b', 'c']");
echo (addCode("array_merge([1, 2, 3], ['a', 'b', 'c']) = "));
addBr(var_dump(array_merge([1, 2, 3], ['a', 'b', 'c'])));
addBr('');
hr();
addBr('Функция ' . rB('array_slice') . ' отрезает и возвращает часть массива. При этом сам массив не меняется. Первым параметром указывается массив для разрезания. Вторым параметром указывается, с какого элемента начинать отрезание, а третьим - сколько элементов отрезать. Второй параметр может быть отрицательным - в этом случае отсчет начнется с конца (-1 - последний элемент, -2 - предпоследний и так далее). Третий параметр можно вообще не указывать - в этом случае массив отрежется до самого конца. Последний необязательный параметр регулирует сохранять ли ключи при отрезании, true - сохранять, false (по умолчанию) - не сохранять. Строковые ключи сохраняются, независимо от значения этого параметра.');

addBr(rB('Синтаксис:') . addCode(' array_slice(массив, откуда отрезать,  [сколько], [сохранять ключи = true]);'));
addBr(rB('Задача'));
addBr('Даны массив:	$arr = [1, 2, 3, 4, 5] С помощью функции array_slice сделайте из него следующий массив:	[2, 3, 4]');
echo (addCode('array_slice(array_slice([1, 2, 3, 4, 5],1),0,3 ) = '));
addBr(var_dump(array_slice(array_slice([1, 2, 3, 4, 5], 1), 0, 3)));
addBr(' ');
hr();
addBr("Функция " . rB('array_splice') . " отрезает и возвращает часть массива. При этом отрезанная часть исчезает из массива. Вместо отрезанной части можно вставлять новые элементы.
Первым параметром указывается массив для разрезания. Вторым параметром указывается, с какого элемента начинать отрезание, а третьим - сколько элементов отрезать. Третий параметр может быть отрицательным - в этом случае отсчет начнется с конца (-1 - последний элемент, -2 - предпоследний и так далее). Третий параметр можно вообще не указывать - в этом случае массив отрежется до самого конца. В последнем необязательным параметре можно задавать массив элементов, которые будут вставлены взамен удаленных.
");
addBr(rB('Синтаксис: ') . addCode('array_splice(массив, откуда отрезать, [сколько], [вставить взамен])'));

// Пример 
// Давайте вырежем элементы с первого (имеет номер 0), 3 штуки:
// 	$arr = ['a', 'b', 'c', 'd', 'e'];
// 	$result = array_splice($arr, 0, 3);
// 	var_dump($result);
// Результат выполнения кода: ['a', 'b', 'c']
// При этом массив $arr станет выглядеть так: ['d', 'e']

// Пример 
// Давайте вырежем элементы со второго (имеет номер 1), 3 штуки:
// 	$arr = ['a', 'b', 'c', 'd', 'e'];
// 	$result = array_splice($arr, 1, 3);
// 	var_dump($result);
// Результат выполнения кода: ['b', 'c', 'd']
// При этом массив $arr станет выглядеть так: ['a', 'e']

// Пример 
// Давайте вырежем элементы со второго (имеет номер 1) до конца массива. Для этого третий параметр не пишем:
// 	$arr = ['a', 'b', 'c', 'd', 'e'];
// 	$result = array_splice($arr, 1);
// 	var_dump($result);
// Результат выполнения кода: ['b', 'c', 'd', 'e']
// При этом массив $arr станет выглядеть так: ['a']

// Пример 
// Давайте вырежем элементы с предпоследнего, 2 штуки. Для этого второй параметр установим в -2 (позиция предпоследнего элемента):
// 	$arr = ['a', 'b', 'c', 'd', 'e'];
// 	$result = array_splice($arr, -2, 2);
// 	var_dump($result);
// Результат выполнения кода: ['d', 'e']
// При этом массив $arr станет выглядеть так: ['a', 'b', 'c']

// Пример 
// Давайте вырежем элементы со второго (имеет номер 1), 2 штуки, а в замен вставим элементы 1, 2, 3:
// 	$arr = ['a', 'b', 'c', 'd', 'e'];
// 	$result = array_splice($arr, 1, 2, [1, 2, 3]);
// 	var_dump($result);
// Результат выполнения кода:['b', 'c']
// При этом массив $arr станет выглядеть так:['a', 1, 2, 3, 'd', 'e']

// Пример 
// Давайте вообще ничего не будем вырезать, а просто вставим элементы 1, 2, 3 начиная с позиции 1. Для этого третий параметр ставится в ноль:
// 	$arr = ['a', 'b', 'c', 'd', 'e'];
// 	$result = array_splice($arr, 1, 0, [1, 2, 3]);
// 	var_dump($result);
// Результат выполнения кода: []
// При этом массив $arr станет выглядеть так: ['a', 1, 2, 3, 'b', 'c', 'd', 'e']

addBr(rB('Задача'));
addBr('Дан массив: $arr = [1, 2, 3, 4, 5]; С помощью функции array_splice сделайте из него следующий массив:[1, 4, 5]');
// echo (addCode('array_slice(array_slice([1, 2, 3, 4, 5],1),0,3 ) = '));
$spliceArr = [1, 2, 3, 4, 5];
$result = array_splice($spliceArr, 1, 2);
addBr(var_dump($result));
addBr(var_dump($spliceArr));
echo (addCode('$arr = [1, 2, 3, 4, 5];' . "<br/>" . '
$result = array_splice($arr, 1,2);' . "<br/>" . '
var_dump($arr)' . ' = '));
var_dump($spliceArr);
addBr(' ');

addBr(rB('Задача'));
addBr('Дан массив: $arr = [1, 2, 3, 4, 5]; С помощью функции array_splice сделайте из него следующий массив:[2, 3, 4]');
$spliceArr2 = [1, 2, 3, 4, 5];
array_splice($spliceArr2, 0, 1);
array_splice($spliceArr2, 3, 1);
echo (addCode('$arr = [1, 2, 3, 4, 5];' . "<br/>" . '
array_splice($arr2, 0,1);' . "<br/>" . '
array_splice($arr2, 3,1);' . "<br/>" . '
var_dump($arr2)' . ' = '));
var_dump($spliceArr2);

addBr(' ');
addBr(rB('Задача'));
addBr('Дан массив: $arr = [1, 2, 3, 4, 5]; С помощью функции array_splice сделайте из него следующий массив:[1, 2, 3, "a", "b","c", 4, 5]');
$spliceArr3 = [1, 2, 3, 4, 5];
array_splice($spliceArr3, 3, 0, ['a', 'b', 'c']);
echo (addCode('$arr = [1, 2, 3, 4, 5];' . "<br/>" . '
array_splice($arr,3,0,[' . 'a' . ',' . 'b' . ',' . 'c' . ']);' . "<br/>" . '
var_dump($arr) = '));
var_dump($spliceArr3);

addBr(' ');
addBr(rB('Задача'));
addBr('Дан массив: $arr = [1, 2, 3, 4, 5]; С помощью функции array_splice сделайте из него следующий массив:[1, ' . 'a' . ',' . 'b' . ', 2, 3, 4,' . 'c' . ',5,' . 'e' . ']');
$spliceArr4 = [1, 2, 3, 4, 5];
array_splice($spliceArr4, 1, 0, ['a', 'b']);
array_splice($spliceArr4, 6, 0, ['c']);
array_splice($spliceArr4, 8, 0, ['e']);
echo (addCode('$arr = [1, 2, 3, 4, 5];' . "<br/>" . '
array_splice($arr, 1,0,[.' . 'a' . ',' . 'b' . ']);' . "<br/>" . '
array_splice($arr, 6,0,[' . 'c' . ']);' . "<br/>" . '
array_splice($arr, 8,0,[' . 'e' . ']);' . "<br/>" . '
var_dump($arr)' . ' = '));
var_dump($spliceArr4);
addBr('');
hr();

addBr('Функция ' . rB('array_keys') . ' получает ключи массива и записывает их в новый массив.');
addBr(rB('Синтаксис:') . addCode(' array_keys(массив);'));
// Пример 
// Давайте получим ключи из массива: $arr = ['a'=>1, 'b'=>2, 'c'=>3, 'd'=>4, 'e'=>5];
// 	$result = array_keys($arr);
// 	var_dump($result);
// Результат выполнения кода: ['a', 'b', 'c', 'd', 'e']
addBr('');
addBr('Функция ' . rB('array_values') . ' выбирает все значения из массива.');
addBr(rB('Синтаксис:') . addCode(' array_values(массив);'));
// Пример 
// Давайте получим все значения массива:$arr = ['a'=>1, 'b'=>2, 'c'=>3, 'd'=>4, 'e'=>5];
// 	var_dump(array_values($arr));
// Результат выполнения кода: [1, 2, 3, 4, 5]
addBr('');
addBr('Функция ' . rB('array_combine') . ' осуществляет слияние двух массивов в один ассоциативный. Первым параметром функция принимает массив будущих ключей, а вторым - массив будущих значений.');
addBr(rB('Синтаксис:') . addCode(' array_combine(массив ключей, массив значений);'));

addBr('');
addBr(rB('Задача'));
addBr('Дан массив:$arr = [' . 'a' . ' => 1, ' . 'b' . ' => 2, ' . 'c' . ' => 3]; Запишите в массив $keys ключи из этого массива, а в $values – значения.');
$arr = ['a' => 1, 'b' => 2, 'c' => 3];
$arrKeys = array_keys($arr);
addBr(addCode('$arr =[' . 'a' . ' => 1, ' . 'b' . ' => 2, ' . 'c' . ' => 3];'));
addBr(addCode('$arrKeys = array_keys($arr);'));
echo (addCode('var_dump($arrKeys)') . ' = ');
addBr(var_dump($arrKeys));
addBr(rB('Задача'));
addBr('Дан массивы:	$arr1 = [' . 'a' . ', ' . 'b' . ',' . 'c' . ']; $arr2 = [1, 2, 3]; Создайте с их помощью следующий массив:	[' . 'a' . ' => 1,' . 'b' . ' => 2,' . 'c' . ' => 3]');
$arr1 = ['a', 'b', 'c'];
$arr2 = [1, 2, 3];
$arr3 = array_combine($arr1, $arr2);
addBr(addCode('$arr3 = array_combine($arr1, $arr2)'));
echo (addCode('var_dump($arr3)') . ' = ');
var_dump($arr3);
addBr('');
hr();

addBr('Функция ' . rB('array_flip') . ' производит обмен местами ключей и значений массива.');
addBr(rB('Синтаксис:') . addCode(' array_flip(массив)'));
addBr('');
addBr('Функция ' . rB('array_reverse') . ' переворачивает массив в обратном порядке. Первым параметром передается массив, а вторым - сохранять ключи при перестановке элементов или нет (true - да, false - нет). Второй параметр указывать необязательно. В таком случае по умолчанию вторым параметром является false. Строковые ключи всегда сохраняются, независимо от значения этого параметра.');
addBr(rB('Синтаксис:') . addCode(' array_reverse(массив, [сохранять ли ключи]);'));
addBr('');
addBr(rB('Задача'));
addBr('Дан массив:	$arr = [' . 'a' . ' => 1, ' . 'b' . ' => 2, ' . 'c' . ' => 3]; Поменяйте в нем местами ключи и значения.');
echo (addCode(' array_flip($arr]);') . ' = ');
addBr(var_dump(array_flip(['a' => 1, 'b' => 2, 'c' => 3])));
addBr(rB('Задача'));
addBr('Дан массив:	$arr = [1, 2, 3, 4, 5]; Сделайте из него следующий массив:[5, 4, 3, 2, 1]');
echo (addCode(' array_reverse([$arr]);') . ' = ');
addBr(var_dump(array_reverse([1, 2, 3, 4, 5])));
addBr('');
hr();

addBr('Функция ' . rB('array_search') . ' осуществляет поиск значения в массиве и возвращает ключ первого найденного элемента. Если такой элемент не найдет - вернет false. Третий параметр задает строгое сравнение по типу (как по ===). Если поставить true - он будет сравнивать строго, а если false (по умолчанию) - то нет.');
addBr(rB('Синтаксис:') . addCode(' array_search(что ищем, где ищем, [сравнивать по типу = false]);'));
addBr('');
addBr(rB('Задача'));
addBr('Дан массив:	$arr = ' . "['a', '-', 'b', '-', 'c', '-', 'd'];" . ' Найдите позицию первого элемента ' . "'-'" . '.');
addBr(addCode("array_search('-', ['a', '-', 'b', '-', 'c', '-', 'd'])") . ' = ' . array_search('-', ['a', '-', 'b', '-', 'c', '-', 'd']));
addBr(rB('Задача'));
addBr("Дан массив: " . '$arr' . " = ['a', '-', 'b', '-', 'c', '-', 'd']; Найдите позицию первого элемента '-' и удалите его с помощью функции array_splice.");
addBr(addCode('$arr' . " = ['a', '-', 'b', '-', 'c', '-', 'd'];"));
$arr = ['a', '-', 'b', '-', 'c', '-', 'd'];
array_splice($arr, array_search('-', $arr), 1);
echo (addCode('array_splice($arr, array_search(' . '-' . ', $arr), 1)') . ' = ');

var_dump($arr);

hr();

addBr(' Для сортировки массивов в PHP существует несколько функций: ' . rB('sort') . '- по возрастанию элементов, ' . rB('rsort') . ' - по убыванию элементов, ' . rB('asort') . ' - по возрастанию элементов с сохранением ключей, ' . rB('arsort') . ' - по убыванию элементов с сохранением ключей,  ' . rB('ksort') . ' - по возрастанию ключей, ' . rB('krsort') . ' - по убыванию ключей, ' . rB('usort') . ' - по функции по элементам,  ' . rB('uasort') . ' - по функции по элементам с сохранением ключей,  ' . rB('uksort') . ' - по функции по ключам,  ' . rB('natsort') . ' - натуральная сортировка. <br/>
' . rB('Все эти функции изменяют сам массив') . ' - это значит, что результат не нужно никуда присваивать: поменяется сам массив.');
addBr(rB('Синтаксис:') . addCode(' sort(массив);'));
addBr('');
addBr(rB('Задача'));
addBr('Дан массив:	$arr = ' . "['3'=>'a', '1'=>'c', '2'=>'e', '4'=>'b'];" . ' Попробуйте на нем различные типы сортировок. ');
$arr = ['3' => 'a', '1' => 'c', '2' => 'e', '4' => 'b'];
sort($arr);
echo (addCode('sort($arr); var_dump($arr);') . ' = ');
addBr(var_dump($arr));
rsort($arr);
echo (addCode('rsort($arr); var_dump($arr);') . ' = ');
addBr(var_dump($arr));
asort($arr);
echo (addCode('asort($arr); var_dump($arr);') . ' = ');
addBr(var_dump($arr));
arsort($arr);
echo (addCode('arsort($arr); var_dump($arr);') . ' = ');
addBr(var_dump($arr));
ksort($arr);
echo (addCode('ksort($arr); var_dump($arr);') . ' = ');
addBr(var_dump($arr));
krsort($arr);
echo (addCode('krsort($arr); var_dump($arr);') . ' = ');
addBr(var_dump($arr));
usort($arr, function ($a, $b) {
	return ($a < $b) ? -1 : 1;
});
echo (addCode('usort($arr, function($a, $b){return ($a < $b) ? -1 : 1;})') . ' = ');
addBr(var_dump($arr));
uasort($arr, function ($a, $b) {
	return ($a < $b) ? -1 : 1;
});
echo (addCode('uasort($arr, function($a, $b){return ($a < $b) ? -1 : 1;})') . ' = ');
addBr(var_dump($arr));
natsort($arr);
echo (addCode('natsort($arr') . ' = ');
addBr(var_dump($arr));
addBr('');
hr();

addBr('Функция ' . rB('array_rand') . ' array_rand возвращает случайный ключ из массива. Первым параметром задается массив, а второй необязательный параметр указывает, сколько случайных ключей следует вернуть. Если он не указан - возвращается один ключ, а если указан - заданное количество ключей в виде массива.');
addBr(rB('Синтаксис:') . addCode(' array_rand(массив, [сколько ключей выбрать])'));
addBr('');
addBr(rB('Задача'));
addBr('Дан массив:	$arr = ' . "['a' => 1, 'b' => 2, 'c' => 3];" . ' Выведите на экран случайный ключ из данного массива.');
$arr = ['a' => 1, 'b' => 2, 'c' => 3];
addBr(addCode('array_rand($arr)') . ' = ' . array_rand($arr));
addBr(rB('Задача'));
addBr('Дан массив:	$arr = ' . "['a' => 1, 'b' => 2, 'c' => 3];" . ' Выведите на экран случайный элемент данного массива.');
addbr(addCode('$arr[array_rand($arr)]') . ' = ') . $arr[array_rand($arr)];
hr();

addBr('Функция ' . rB('shuffle') . ' осуществляет перемешивание массива так, чтобы его элементы шли в случайном порядке. При этом функция изменяет сам массив: это значит результат работы функции не нужно никуда присваивать - изменения произойдут над самим массивом.');
addBr(rB('Синтаксис:') . addCode(' shuffle(массив);'));
addBr('');
addBr(rB('Задача'));
addBr('Дан массив:	$arr = ' . "[1, 2, 3, 4, 5]" . ' Перемешайте его элементы в случайном порядке.');
$arr = [1, 2, 3, 4, 5];
shuffle($arr);
echo (addCode('$arr = [1, 2, 3, 4, 5]; <br/>
shuffle($arr); <br/>
var_dump($arr)') . ' = ') . $arr[array_rand($arr)];
addBr(var_dump($arr));
addBr(rB('Задача'));
addBr('Заполните массив числами от 1 до 25 с помощью range, а затем перемешайте его элементы в случайном порядке.');
$arr = range(1, 25);
shuffle($arr);
echo (addCode('$arr = range(1,25); <br/>
shuffle($arr); <br/>
var_dump($arr);') . ' = ');
addBr(var_dump($arr));
addBr(rB('Задача'));
addBr('Создайте массив, заполненный буквами от ' . 'a' . ' до ' . 'z' . ' так, чтобы буквы шли в случайном порядке и не повторялись.');
$arr = range('a', 'z');
shuffle($arr);
echo (addCode('$arr = range(' . 'a' . ',' . 'z' . '); <br/>
shuffle($arr); <br/>
var_dump($arr);') . ' = ');
addBr(var_dump($arr));
addBr(rB('Задача'));
addBr("Сделайте строку длиной 6 символов, состоящую из маленьких английских букв, расположенных в случайном порядке. Буквы не должны повторяться.");
$arr = range('a', 'z');
shuffle($arr);
echo (addCode('$arr = range(' . 'a' . ',' . 'z' . ');<br/>
shuffle($arr);<br/>
echo(implode(array_slice($arr, 0, 6)))') . ' = ');
addBr(implode(array_slice($arr, 0, 6)));
hr();

addBr('Функция ' . rB('array_unique') . ' осуществляет удаление повторяющихся элементов (дублей) из массива.');
addBr(rB('Синтаксис:') . addCode(' array_unique(массив)'));
addBr('');
addBr(rB('Задача'));
addBr('Дан массив: $arr = ' . "['a', 'b', 'c', 'b', 'a']" . '; Удалите из этого массива повторяющиеся элементы');
$arr = ['a', 'b', 'c', 'b', 'a'];
echo (addCode('var_dump(array_unique($arr))') . ' = ');
addBr(var_dump(array_unique($arr)));
hr();

addBr('Функция ' . rB('array_shift') . ' вырезает и возвращает первый элемент массива. ' . rB('При этом этот элемент исчезает из массива.'));
addBr(rB('Синтаксис:') . addCode(' array_shift(массив);'));
addBr('Функция ' . rB('array_pop') . ' вырезает и возвращает последний элемент массива. ' . rB('При этом этот элемент исчезает из массива.'));
addBr(rB('Синтаксис:') . addCode(' array_pop(массив);'));
addBr('Функция ' . rB('array_unshift') . ' добавляет элементы в начало массива. ' . rB('При этом переданный массив изменяется, а функция возвращает новое количество элементов в массиве. ') . 'Элементы для добавления перечисляются через запятую. ');
addBr(rB('Синтаксис:') . addCode(' array_unshift(массив, новые элементы);'));
addBr('Функция ' . rB('array_push') . ' array_push добавляет элементы в конец массива. ' . rB('При этом переданный массив изменяется, а функция возвращает новое количество элементов в массиве. ') . 'Элементы для добавления перечисляются через запятую. ');
addBr(rB('Синтаксис:') . addCode(' array_push(массив, новые элементы);'));
addBr(rB('Задача'));
addBr('Дан массив: $arr = [1, 2, 3, 4, 5]; Выведите на экран его первый и последний элемент, причем так, чтобы в исходном массиве они исчезли.');
$arr = [1, 2, 3, 4, 5];
$firstElem = array_shift($arr);
addBr(addCode('$arr = [1, 2, 3, 4, 5];<br/>
$firstElem = array_shift($arr);'));
addBr(addCode('$firstElem') . ' = ' . $firstElem);
echo(addCode('$arr') . ' = ');
addBr(var_dump($arr));
addBr(rB('Задача'));
addBr('Дан массив: $arr = [1, 2, 3, 4, 5]; Добавьте ему в начало элемент 0, а в конец - элемент 6.');
$arr = [1, 2, 3, 4, 5];
array_unshift($arr, 0);
array_push($arr, 6);
echo(addCode('array_unshift($arr, 0);<br/>
array_push($arr, 6);<br/>
$arr').' = ');
addBr(var_dump($arr));
hr();
addBr('Функция ' . rB('array_pad') . ' дополняет массив определенным значением до заданного размера. Первым параметром функция принимает массив для заполнения, вторым параметром - до какого размера заполнить, третьим - чем заполнять. ' . rB('Второй параметр можно делать отрицательным - в этом случае массив будет дополнятся элементами не с конца, а с начала. '));
addBr(rB('Синтаксис:') . addCode(' array_pad(массив, до какого размера заполнить, чем заполнять);'));
addBr('Функция ' . rB('array_fill ') . ' создает массив, заполненный элементами с определенным значением.');
addBr(rB('Синтаксис:') . addCode(' array_fill(ключ первого элемента, сколько элементов, чем заполнять);'));
// Пример 
// Заполним массив 5-ю элементами с текстом 'x'. Так как первый параметр 3, то ключи начнут свою нумерацию с трех:
// 	var_dump(array_fill(3, 5, 'x'));
// Результат выполнения кода: [3=>'x', 4=>'x', 5=>'x', 6=>'x', 7=>'x']

// Пример 
// Давайте сделаем массив [['x', 'x', 'x'], ['x', 'x', 'x'], ['x', 'x', 'x']]:
// 	$arr = array_fill(0, 3, array_fill(0, 3, 'x'));
// 	var_dump($arr);
// Результат выполнения кода: [['x', 'x', 'x'], ['x', 'x', 'x'], ['x', 'x', 'x']] 
addBr('Функция ' . rB('array_fill_keys ') . ' создает массив и заполняет массив элементами с определенным значением так, чтобы весь массив был с одинаковыми элементами, но разными ключами. Ключи берутся из массива, передаваемого первым параметром.');
addBr(rB('Синтаксис:') . addCode(' array_fill_keys(ключ первого элемента, сколько элементов, чем заполнять);'));
// Пример 
// Заполним массив 5-ю элементами с текстом 'x'. Так как первый параметр 0, то ключи начнут свою нумерацию с нуля:
// 	var_dump(array_fill_keys(0, [5], 'x'));
// Результат выполнения кода: [0=>'x', 1=>'x', 2=>'x', 3=>'x', 4=>'x']

// Пример 
// Заполним массив 5-ю элементами с текстом 'x' с ключами из массива ['a', 'b', 'c', 'd', 'e']:
// 	$arr = array_fill_keys(['a', 'b', 'c', 	'd', 'e'], 'x'); 
// 	var_dump($arr);
// Результат выполнения кода:
// ['a'=>'x', 'b'=>'x', 'c'=>'x', 'd'=>'x', 'e'=>'x'] 
addBr(' ');
addBr(rB('Задача'));
addBr('Дан массив: $arr = '. "['a', 'b', 'c']". '; Сделайте из него следующий массив: '. "['a', 'b', 'c', '-', '-', '-']");
$arr = ['a', 'b', 'c'];
echo(addCode('$arr = ' . "['a', 'b', 'c']" . ';<br/>
var_dump(array_pad($arr, 6, '."' - '".'))').' = ');
addBr(var_dump(array_pad($arr, 6, '-')));

addBr(rB('Задача'));
addBr("Заполните массив 10-ю буквами 'x'");
echo(addCode('var_dump(array_fill(0,10, '."'x'".'))').' = ');
var_dump(array_fill(0,10, 'x'));
addBr(" ");
hr();

addBr('Функция ' . rB('array_chunk') . ' разбивает одномерный массив в двухмерный. Первым параметром она принимает массив, а вторым - количество элементов в каждом подмассиве.');
addBr(rB('Синтаксис:') . addCode(' array_chunk(массив, по сколько элементов);'));
addBr(rB('Задача'));
addBr("Создайте массив, заполненный целыми числами от 1 до 25. С помощью функции array_chunk разбейте этот массив на 5 подмассивов по пять элементов в каждом.");
echo(addCode('var_dump(array_chunk(range(1, 25), 5));').' = ');
var_dump(array_chunk(range(1, 25), 5));
hr();

addBr('Функция ' . rB('array_count_values') . ' array_count_values производит подсчет количества всех значений массива. Возвращает ассоциативный массив, в котором ключами будут элементы массива, а значениями - их количество в массиве.');
addBr(rB('Синтаксис:') . addCode(' array_count_values(массив);'));
addBr(rB('Задача'));
addBr('Дан массив:$arr = '."['a', 'b', 'c', 'b', 'a']".'; Подсчитайте сколько раз встречается каждая из букв.');
echo(addCode("var_dump(array_count_values(['a', 'b', 'c', 'b', 'a']))").' = ');
var_dump(array_count_values(['a', 'b', 'c', 'b', 'a']));
hr();

addBr('Функция ' . rB('array_map') . ' применяет заданную функцию ко всем элементам массива и возвращает измененный массив. Первым параметром функция принимает имя функции, а вторым - массив. Можно передавать дополнительные массивы третьим и так далее параметрами');
addBr(rB('Синтаксис:') . addCode(' array_map(имя функции в кавычках, массив, [еще массивы через запятую]);'));
// Пример 
// Давайте извлечем квадратный корень из каждого элемента массива (с помощью функции sqrt) и запишем в новый массив:
// 	$arr = [1, 4, 9];
// 	$result = array_map('sqrt', $arr);
// 	var_dump($result);
// Результат выполнения кода:[1, 2, 3]
addBr(rB('Задача'));
addBr('Дан массив:$arr = [1, 2, 3, 4, 5]; cоздайте новый массив, в котором будут лежать квадратные корни данных элементов.');
$arr = [1, 2, 3, 4, 5];
$resultArr = array_map('sqrt', $arr);
echo(addCode('var_dump(array_map('."'sqrt'".', $arr);)').' = ');
addBr(var_dump($resultArr));
hr();

addBr('Функция ' . rB('array_intersect') . ' вычисляет пересечение массивов - возвращает массив из элементов, которые есть во всех массивах, переданных в функцию.');
addBr(rB('Синтаксис:') . addCode(' array_intersect(массив, массив, массив...);'));
addBr('Функция ' . rB('array_diff') . ' Сравнивает масси одним или несколькими другими массивами и возвращает значения, сравниваемого массива которых нет ни в одном из других массивов.');
addBr(rB('Синтаксис:') . addCode(' array_diff(массив, массив, массив...);'));

addBr(rB('Задача'));
addBr('Даны массивы: $arr1 = [1, 2, 3, 4, 5]; $arr2 = [3, 4, 5, 6, 7]; Запишите в новый массив элементы, которые есть и в том, и в другом массиве.');
$resultArr = array_intersect([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]);
addBr(addCode('$resultArr = array_intersect([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]);'));
echo(addCode('var_dump($resultArr)').' = ');
addBr(var_dump($resultArr));
addBr(rB('Задача'));
addBr('Даны массивы: $arr1 = [1, 2, 3, 4, 5]; $arr2 = [3, 4, 5, 6, 7]; Запишите в новый массив элементы, которые не присутствуют в обоих массивах одновременно.');
$resultArr = array_merge(array_diff([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]), array_diff([3, 4, 5, 6, 7], [1, 2, 3, 4, 5]));
addBr(addCode('$resultArr = array_merge(array_diff([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]), array_diff([3, 4, 5, 6, 7], [1, 2, 3, 4, 5]))'));
addBr(var_dump($resultArr));


?>