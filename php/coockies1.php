<?php
setcookie('task_1', '12345');
setcookie('month', 'abcde', time() + 60 * 60 * 24 * 31);
setcookie('year', 'year', time() + 60 * 60 * 24 * 365);
setcookie('10_year', '10_year', time() + 60 * 60 * 24 * 3650);
if (isset($_COOKIE['month'])) {
	setcookie('month', '', time());
	unset($_COOKIE['month']);
}

?>
<p>Существует способ сохранения данных прямо в браузере пользователя. Это делается с помощью кук (cookie). Куки - это небольшие кусочки строк, которые хранятся в специальном месте в браузере. Каждая кука имеет свое имя, по которому эту куку можно записать и прочитать.<br />Давайте посмотрим, как это делается. Для начала сделаем два PHP файла. В первом файле мы запишем куку, а во втором - прочитаем ее.<br />Запись кук делается с помощью функции setcookie, которая первым параметром принимает имя этой куки, а вторым - значение. При этом запись кук нужно делать до любого вывода на экран (подобно сессиям).<br /> Итак, давайте в файле запишем куку с именем test и значением 'abcde':</p>
<code>
	<pre>
		file: /coockies1.php
		&lt?php
		setcookie('test', 'abcde');
		?></pre>
</code>
<p>Давайте теперь во втором файле прочитаем нашу куку. Это делается с помощью массива $_COOKIE:</p>
<code>
	<pre>
		file: /coockies2.php
		&lt?php
		echo $_COOKIE['test']; // выведет 'abcde'
		?></pre>
</code>

<p class="fw-bold mt-5">Задача</p>
<p>В одном файле запишите куку, а в другом файле выведите ее на экран.</p>
<p class="fw-bold">Решение:</p>
<code>
	<pre>
	// Вот такой код добавляем в самое начало страницы, что бы PHP Мог модернизировать head отправляемой в браузер страницы
		&lt?php
		setcookie('task_1', '12345');
		?></pre>
</code>
<p class="fw-bold">Результат:</p>
<a href="/coockies/coock_1.php">Перейдём на другую страницу что бы прочитать установленные coockie</a>


<h3 class="fw-bold mt-5">Проблема установки кук в PHP</h3>
<p>При записи и чтении куки на одной странице нас будет поджидать некоторый подвох. Дело в том, что куки, установленные через setcookie, становятся доступными в массиве $_COOKIE только после перезагрузки страницы.
	<br />
	Давайте проверим это. Запишем через setcookie какую-то куку и сразу выведем ее на экран. В этом случае при первом заходе в $_COOKIE для нашей куки будет null, а при уже обновлении страницы - значение куки:
</p>
<code>
	<pre>
		&lt?php
		setcookie('str', 'eee');
		var_dump($_COOKIE['str']); // сначала null, а потом 'eee'
		?>
	</pre>
</code>

<h3 class="fw-bold mt-5">Мгновенная установка кук в PHP</h3>
<p>Для того, чтобы установленная кука сразу появилась в массиве $_COOKIE можно использовать хитрый прием. Суть приема следующая: сначала установим куку с помощью setcookie, а потом вручную запишем ее в массив $_COOKIE:</p>
<code>
	<pre>
	&lt?php
	setcookie('str', 'eee');
	$_COOKIE['str'] = 'eee';
	
	var_dump($_COOKIE['str']); // сразу выведет 'eee'
	?></pre>
</code>
<p>Чтобы кука каждый раз не отправлялась в браузер, можно запись куки сделать внутри условия. Если такой куки нет, то запишем ее:</p>
<code>
	<pre>
		&lt?php
		if (!isset($_COOKIE['str'])) { // если куки нет
			setcookie('str', 'eee');
			$_COOKIE['str'] = 'eee';
		}

		echo $_COOKIE['str']; // выведет 'eee'
		?></pre>
</code>
<p>Давайте обсудим как это работает. При первом заходе на страницу мы попадем в if, установим куку в браузер и сразу запишем в $_COOKIE. Далее через echo выведется вручную записанное нами значение.<br />
	При следующих заходах на страницу мы не попадем в if, но в $_COOKIE будет содержаться наша кука, уже пришедшая из браузера. Таким образом, и при первом заходе, и при последующих в $_COOKIE будет находится наша кука.</p>

<h3 class="fw-bold mt-5">Счетчик обновления страницы на куках в PHP</h3>
<p>Давайте сделаем счетчик обновления страницы:</p>
<code>
	<pre>
		&lt?php
		if (!isset($_COOKIE['counter'])) { // первый заход на страницу
			setcookie('counter', 1);
			$_COOKIE['counter'] = 1;
		} else {
			setcookie('counter', $_COOKIE['counter'] + 1);
			$_COOKIE['counter'] = $_COOKIE['counter'] + 1;
		}

		echo $_COOKIE['counter'];
		?>
	</pre>
</code>
<p>Можно упростить код с помощью оператора ++:</p>
<code>
	<pre>
		&lt?php
		if (!isset($_COOKIE['counter'])) { // первый заход на страницу
			setcookie('counter', 1);
			$_COOKIE['counter'] = 1;
		} else {
			setcookie('counter', ++$_COOKIE['counter']);
		}

		echo $_COOKIE['counter'];
		?>
	</pre>
</code>
<p>Запишите в куку момент времени захода пользователя на страницу. При обновлении страницы выведите на экран, сколько времени прошло с момента первого захода на страницу.</p>

<p class="fw-bold mt-5">Задача</p>
<p>Запишите в куку момент времени захода пользователя на страницу. При обновлении страницы выведите на экран, сколько времени прошло с момента первого захода на страницу.</p>
<p class="fw-bold mt-5"><a href="/coockies/time_task1.php">Решение:</a></p>

<h3 class="fw-bold mt-5">Время жизни куки в PHP</h3>
<p>Мы уже знаем, что в куки нужно писать с помощью функции setcookie:</p>
<code>
	<pre>
		&lt?php
		setcookie('test', 'abcde');
		?></pre>
</code>
<p>Однако такие куки долго не живут - только до закрытия браузера. Продлить время жизни куки можно с помощью третьего параметра, который принимает момент времени в формате timestamp. Как только этот момент наступит - кука автоматически будет удалена браузером.<br />
	Однако устанавливать конкретный момент смерти куки не очень удобно. Удобнее было бы установить куку, например, на час от текущего момента, или на день, или на год.
	<br />
	Поэтому третий параметр принято записывать так: настоящий момент времени + N секунд. Настоящий момент времени в формате можно получить с помощью функции time.<br />Давайте для примера установим куку на один час. Так как в часе 3600 секунд, то прибавим это число к текущему моменту:
</p>
<code>
	<pre>
		&lt?php
		setcookie('test', 'abcde', time() + 3600);
		?></pre>
</code>
<p>При установки кук обычно прописывают секунды в таком виде: 60 * 60 - это час, 60 * 60 * 24 - это сутки. Ну и так далее. Делается это для того, чтобы читающему ваш код было очевидно, на какой промежуток времени установлена кука.
	<br />
	Давайте для примера установим куку на сутки:
</p>
<code>
	<pre>
		&lt?php
		setcookie('test', 'abcde', time() + 60 * 60 * 24);
		?></pre>
</code>

<p class="fw-bold mt-5">Задача:</p>
<p>Установите какую-нибудь куку на месяц.</p>
<p class="fw-bold">Решение:</p>
<code>
	<pre>
		&lt?php
		setcookie('month', 'month', time() + 60 * 60 * 24 * 31);
		?></pre>
</code>
<p class="">Результат можно посмотреть в браузере application/Cookies</p>
<p class="fw-bold mt-5">Задача:</p>
<p>Установите какую-нибудь куку на год.</p>
<p class="fw-bold">Решение:</p>
<code>
	<pre>
		&lt?php
		setcookie('year', 'year', time() + 60 * 60 * 24 * 365);
		?></pre>
</code>
<p class="">Результат можно посмотреть в браузере application/Cookies</p>
<p class="fw-bold mt-5">Задача:</p>
<p>Установите какую-нибудь куку на 10 лет.</p>
<p class="fw-bold">Решение:</p>
<code>
	<pre>
		&lt?php
		setcookie('10_year', '10_year', time() + 60 * 60 * 24 * 365 * 10);
		?></pre>
</code>
<p>Результат можно посмотреть в браузере application/Cookies <i>(На 10 лет кука не поставилась. Только на год и несколько дней.)</i></p>

<h3 class="fw-bold mt-5">Удаление кук в PHP</h3>
<p>В PHP нет встроенного механизма для удаления кук. Поэтому удаляют куки хитрым способом - устанавливая время 'смерти' куки на текущий момент:</p>
<code>
	<pre>
		&lt?php
		setcookie('test', '', time());
		?>
	</pre>
</code>
<p>Удаление куки приведет к изменению $_COOKIE только после перезагрузки страницы:</p>
<code>
	<pre>
	&lt?php
	setcookie('test', '', time());
	var_dump($_COOKIE['test']); // первый раз выведет значение куки 
	?></pre>
</code>

<h3 class="fw-bold mt-5">Мгновенное удаление кук в PHP</h3>
<p>Для того, чтобы при удалении куки сразу менялся $_COOKIE можно использовать уже известный нам хитрый прием:</p>
<code>
	<pre>
	&lt?php
		setcookie('test', '', time());
		unset($_COOKIE['test']);

		var_dump($_COOKIE['test']);
	?></pre>
</code>
<p>Добавим условие, чтобы каждый раз не удалять уже удаленную куку:</p>
<code>
	<pre>
	&lt?php
		if (isset($_COOKIE['test'])) {
		setcookie('test', '', time());
		unset($_COOKIE['test']);
		}
		var_dump($_COOKIE['test']); // удалена
	?></pre>
</code>
<p>Удаление, так же как и установка coockies должна производится в самых первых строках страницы что бы эта информация попала в head страницы</p>